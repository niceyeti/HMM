#ifndef DISCRETE_HMM_DATASET
#define DISCRETE_HMM_DATASET

#include "Flyweight.hpp"
#include "Flyweight.cpp"

#include <string>
#include <fstream>
#include <iostream>

using namespace std;

/*
Builds datasets as inputs for the HMM class. The datasets may be labelled <emissionSymbol:hiddenSymbol>,
or unlabelled <emissionSymbol>. The latter are used for unsupervised learning using the
Baum-Welch procedure.

This gives two primary input file formats, (1) supervised/labelled data and (2) unsupervised/unlabelled data:

	(1):
	<emissionSymbol>\t<stateSymbol>
	<emissionSymbol>\t<stateSymbol>
	...

	(2):
	<emissionSymbol>\n
	<emissionSymbol>\n
	...

Both files represent continuous sequences, such that successive lines represent sequential observations.

So a hmm with part-of-speech latent variables and word emission values
would look as follows:
	NN[TAB]cat

Where each line is a single example of state+emission_symbol, and the file
is expected to contain lines of such examples.

TODO: Template the Dataset class (for string, char, etc) for the class labels.
TODO: Encapsulate the supervised/unsupervised dataset states of this object; right now the HMM just uses it accordingly.

Note that for unlabeled data, only observation/emissions are known to this class.
*/
class DiscreteHmmDataset{
	public:
		DiscreteHmmDataset();
		DiscreteHmmDataset(const string& dataPath);
		~DiscreteHmmDataset();
		void BuildLabeledDataset(const string& path);
		void BuildUnlabeledDataset(const string& path);
		void Clear();
		int NumStates();
		int NumSymbols();
		int AddState(const string& state);
		int AddSymbol(const string& symbol);
		const string& GetSymbol(const int key);
		const string& GetState(const int key);
		int NumInstances();
		vector<pair<int,int> > LabeledDataSequence;
		vector<int> UnlabeledDataSequence;
	private:
		Flyweight<string> _stateFlyweight;
		Flyweight<string> _symbolFlyweight;
};

#endif
